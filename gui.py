# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sample.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys, math
import validators
import requests


class dialog_box():
    def __init__(self):
        self.dialog = QtWidgets.QMessageBox()

    def warning_box(self, body ,title = "Warning"):
        self.dialog.setIcon(QtWidgets.QMessageBox.Warning)
        self.dialog.setText(body)
        # msg.setInformativeText("This is additional information")
        self.dialog.setWindowTitle(title)
        # msg.setDetailedText("The details are as follows:")
        # msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
        self.dialog.exec_()

    def question(self, body, title="Split Downloader"):
        self.dialog.setIcon(QtWidgets.QMessageBox.Question)
        self.dialog.setText(body)
        self.dialog.setWindowTitle(title)
        self.dialog.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
        self.dialog.exec_()
        return self.dialog.clickedButton().text()

    def info_box(self, body ,title = "Info"):
        self.dialog.setIcon(QtWidgets.QMessageBox.Information)
        self.dialog.setText(body)
        # msg.setInformativeText("This is additional information")
        self.dialog.setWindowTitle(title)
        # msg.setDetailedText("The details are as follows:")
        # msg.setStandardButtons(QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel)
        self.dialog.exec_()

class download():
    def __init__(self, logger, url):
        self.logger = logger
        self.url = url
        self.dialogbox = dialog_box()

    def url_check(self):
        self.logger.info("Checking URL :" + str(self.url))
        if not validators.url(self.url):
            print("Enter a Valid URL")
            self.logger.error("The URL is invalid.")
            self.dialogbox.warning_box("Enter a Valid URL")
            return False
        else:
            self.logger.info("URL is Valid")
            return True

    def internet_check(self):
        self.logger.info("Checking Internet connectivity..")
        try:
            r = requests.head("https://www.google.com/", timeout=3)
            self.logger.info("Internet is connected..")
            return True
        except requests.ConnectionError as ex:
            print(ex)
            self.logger.error("Internet is not connected..")
            self.dialogbox.warning_box("Check your Internet Connection!")
            return False

    def get_headers(self):
        self.logger.info(f"Getting headers from {self.url}")
        self.file_size = content_type = accept_ranges = None
        try:
            res = requests.head(self.url)
            print(res)
            if res.ok:
                headers_items = res.headers
                print(headers_items)
            else:
                print("404")
                return self.file_size, content_type, accept_ranges
        except:
            print("HEADER NOT FOUND")
            self.logger.warning(f"Error in getting headers")
            return self.file_size, content_type, accept_ranges
        self.file_size = headers_items.get('Content-Length')
        content_type = headers_items.get('Content-Type')
        accept_ranges = headers_items.get('Accept-Ranges')
        return self.file_size, content_type, accept_ranges

    def split_parts(self, chunk_size):
        chunk_size_b = chunk_size * 1024 * 1024
        number_of_chunks = math.ceil(int(self.file_size) / chunk_size_b)
        return [ _ for _ in range(1,number_of_chunks+1)]





def download_chunk(url):
    try:
        res = requests.head(url)
        if res.ok:
            # req = requests.head(url, stream=True)
            headers_items = res.headers
            print(headers_items)
            file_size = headers_items.get('Content-Length')
            content_type = headers_items.get('Content-Type')
            accept_ranges = headers_items.get('Accept-Ranges')
            if "html" in content_type:
                print("Not downloadable")
            if not file_size:
                print("File size unknown")
            if not accept_ranges:
                print("Split download is not possible")
            # file_size = int(headers_items['Content-Length'])
            # content_type = headers_items['Content-Type']
            # print(file_size)
            # print(content_type)
            # if "html" in content_type.lower():
            #     print("Not downloadable")
            #     # sys.exit(1)
            # file_name = url.split('/')[-1]
            # print(file_name)
            # chunk_size = 1024 * 1024
            # print(chunk_size)
            # number_of_chunks = math.ceil(file_size / chunk_size)
            # print(number_of_chunks)
            # for chunk_number in range(number_of_chunks):
            #     if chunk_number:
            #         start = (chunk_number * chunk_size) + 1
            #     elif not chunk_number:
            #         start = chunk_number * chunk_size
            #     end = ((chunk_number + 1) * chunk_size)
            #     if end > file_size:
            #         end = file_size
            #     print(start, end)
            #
            #     range_headers = {'Range': f'bytes={start}-{end}'}
            #     req = requests.get(url, stream=True, headers=range_headers)
            #     if not chunk_number:
            #         with open(file_name, 'wb') as f:
            #             for chunk in req.iter_content(chunk_size=1048576):
            #                 f.write(chunk)
            #     else:
            #         with open(file_name, 'ab') as f:
            #             for chunk in req.iter_content(chunk_size=1048576):
            #                 f.write(chunk)
        else:
            print("Error")
    except:
        print("NO connection")
        # sys.exit(1)

class Ui_SplitDownloader(object):
    def __init__(self, logger):
        self.logger = logger
        self.logger.info("Starting the Split Downloader..")
    def setupUi(self, SplitDownloader):
        SplitDownloader.setObjectName("SplitDownloader")
        SplitDownloader.resize(677, 469)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(SplitDownloader.sizePolicy().hasHeightForWidth())
        SplitDownloader.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/download.png/download.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        SplitDownloader.setWindowIcon(icon)
        SplitDownloader.setAccessibleDescription("")
        SplitDownloader.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(SplitDownloader)
        self.centralwidget.setObjectName("centralwidget")
        self.groupbox_status = QtWidgets.QGroupBox(self.centralwidget)
        self.groupbox_status.setGeometry(QtCore.QRect(20, 300, 641, 81))
        self.groupbox_status.setObjectName("groupbox_status")
        self.progressBar = QtWidgets.QProgressBar(self.groupbox_status)
        self.progressBar.setGeometry(QtCore.QRect(10, 40, 611, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.label_download_status = QtWidgets.QLabel(self.groupbox_status)
        self.label_download_status.setGeometry(QtCore.QRect(70, 10, 481, 20))
        self.label_download_status.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_download_status.setAlignment(QtCore.Qt.AlignCenter)
        self.label_download_status.setObjectName("label_download_status")
        self.button_exit = QtWidgets.QPushButton(self.centralwidget)
        self.button_exit.setGeometry(QtCore.QRect(290, 390, 75, 23))
        self.button_exit.setObjectName("button_exit")
        self.SplitDownloader_header = QtWidgets.QLabel(self.centralwidget)
        self.SplitDownloader_header.setGeometry(QtCore.QRect(110, 20, 351, 21))
        font = QtGui.QFont()
        font.setFamily("Segoe Script")
        font.setPointSize(18)
        self.SplitDownloader_header.setFont(font)
        self.SplitDownloader_header.setAlignment(QtCore.Qt.AlignCenter)
        self.SplitDownloader_header.setObjectName("SplitDownloader_header")
        self.logo = QtWidgets.QLabel(self.centralwidget)
        self.logo.setGeometry(QtCore.QRect(460, 10, 51, 41))
        self.logo.setText("")
        self.logo.setPixmap(QtGui.QPixmap(":/download.png/download.png"))
        self.logo.setScaledContents(True)
        self.logo.setObjectName("logo")
        self.Tab_MAIN = QtWidgets.QTabWidget(self.centralwidget)
        self.Tab_MAIN.setGeometry(QtCore.QRect(20, 60, 641, 231))
        self.Tab_MAIN.setAutoFillBackground(True)
        self.Tab_MAIN.setStyleSheet("")
        self.Tab_MAIN.setObjectName("Tab_MAIN")
        self.tab_download = QtWidgets.QWidget()
        self.tab_download.setObjectName("tab_download")
        self.button_browse_download = QtWidgets.QPushButton(self.tab_download)
        self.button_browse_download.setGeometry(QtCore.QRect(550, 130, 75, 23))
        self.button_browse_download.setObjectName("button_browse_download")
        self.label_split_downloadable = QtWidgets.QLabel(self.tab_download)
        self.label_split_downloadable.setGeometry(QtCore.QRect(240, 60, 91, 16))
        self.label_split_downloadable.setObjectName("label_split_downloadable")
        self.label_part_select = QtWidgets.QLabel(self.tab_download)
        self.label_part_select.setGeometry(QtCore.QRect(20, 100, 61, 21))
        self.label_part_select.setObjectName("label_part_select")
        self.label_yes_no = QtWidgets.QLabel(self.tab_download)
        self.label_yes_no.setGeometry(QtCore.QRect(330, 60, 31, 16))
        self.label_yes_no.setAlignment(QtCore.Qt.AlignCenter)
        self.label_yes_no.setObjectName("label_yes_no")
        self.button_ok_part_select = QtWidgets.QPushButton(self.tab_download)
        self.button_ok_part_select.setEnabled(False)
        self.button_ok_part_select.setGeometry(QtCore.QRect(550, 100, 75, 23))
        self.button_ok_part_select.setObjectName("button_ok_part_select")
        self.combo_partselect = QtWidgets.QComboBox(self.tab_download)
        self.combo_partselect.setEnabled(True)
        self.combo_partselect.setGeometry(QtCore.QRect(90, 100, 451, 22))
        self.combo_partselect.setEditable(False)
        self.combo_partselect.setObjectName("combo_partselect")
        self.label_file_size_output = QtWidgets.QLabel(self.tab_download)
        self.label_file_size_output.setGeometry(QtCore.QRect(140, 60, 61, 16))
        self.label_file_size_output.setAlignment(QtCore.Qt.AlignCenter)
        self.label_file_size_output.setObjectName("label_file_size_output")
        self.label_file_size = QtWidgets.QLabel(self.tab_download)
        self.label_file_size.setGeometry(QtCore.QRect(90, 60, 47, 13))
        self.label_file_size.setObjectName("label_file_size")
        self.label_url = QtWidgets.QLabel(self.tab_download)
        self.label_url.setGeometry(QtCore.QRect(20, 20, 51, 20))
        self.label_url.setObjectName("label_url")
        self.label_folder_path_download = QtWidgets.QLabel(self.tab_download)
        self.label_folder_path_download.setGeometry(QtCore.QRect(20, 130, 61, 21))
        self.label_folder_path_download.setObjectName("label_folder_path_download")
        self.button_url_check = QtWidgets.QPushButton(self.tab_download)
        self.button_url_check.setGeometry(QtCore.QRect(550, 20, 75, 23))
        self.button_url_check.setObjectName("button_url_check")
        self.button_download = QtWidgets.QPushButton(self.tab_download)
        self.button_download.setEnabled(False)
        self.button_download.setGeometry(QtCore.QRect(220, 170, 75, 23))
        self.button_download.setStyleSheet("")
        self.button_download.setObjectName("button_download")
        self.label_chunk_size = QtWidgets.QLabel(self.tab_download)
        self.label_chunk_size.setGeometry(QtCore.QRect(390, 60, 61, 16))
        self.label_chunk_size.setObjectName("label_chunk_size")
        self.lineedit_chunk_size = QtWidgets.QLineEdit(self.tab_download)
        self.lineedit_chunk_size.setGeometry(QtCore.QRect(450, 60, 61, 22))
        self.onlyInt = QtGui.QIntValidator(1,99999999)
        self.lineedit_chunk_size.setValidator(self.onlyInt)
        self.lineedit_chunk_size.setEnabled(False)
        self.lineedit_chunk_size.setObjectName("lineedit_chunk_size")
        self.label_MB = QtWidgets.QLabel(self.tab_download)
        self.label_MB.setGeometry(QtCore.QRect(520, 60, 21, 16))
        self.label_MB.setObjectName("label_MB")
        self.button_cancel_download = QtWidgets.QPushButton(self.tab_download)
        self.button_cancel_download.setGeometry(QtCore.QRect(300, 170, 75, 23))
        self.button_cancel_download.setObjectName("button_cancel_download")
        self.url_line_edit = QtWidgets.QLineEdit(self.tab_download)
        self.url_line_edit.setGeometry(QtCore.QRect(90, 20, 451, 20))
        self.url_line_edit.setObjectName("url_line_edit")
        self.folder_download_line_edit = QtWidgets.QLineEdit(self.tab_download)
        self.folder_download_line_edit.setGeometry(QtCore.QRect(90, 130, 451, 20))
        self.folder_download_line_edit.setObjectName("folder_download_line_edit")
        self.Tab_MAIN.addTab(self.tab_download, "")
        self.tab_merge = QtWidgets.QWidget()
        self.tab_merge.setObjectName("tab_merge")
        self.button_merge = QtWidgets.QPushButton(self.tab_merge)
        self.button_merge.setEnabled(False)
        self.button_merge.setGeometry(QtCore.QRect(220, 160, 75, 23))
        self.button_merge.setObjectName("button_merge")
        self.button_browse_merge_path_merge = QtWidgets.QPushButton(self.tab_merge)
        self.button_browse_merge_path_merge.setGeometry(QtCore.QRect(550, 100, 75, 23))
        self.button_browse_merge_path_merge.setObjectName("button_browse_merge_path_merge")
        self.label_merge_path_merge = QtWidgets.QLabel(self.tab_merge)
        self.label_merge_path_merge.setGeometry(QtCore.QRect(20, 100, 61, 16))
        self.label_merge_path_merge.setObjectName("label_merge_path_merge")
        self.label_folder_path_merge_3 = QtWidgets.QLabel(self.tab_merge)
        self.label_folder_path_merge_3.setGeometry(QtCore.QRect(20, 60, 61, 16))
        self.label_folder_path_merge_3.setObjectName("label_folder_path_merge_3")
        self.button_browse_merge_3 = QtWidgets.QPushButton(self.tab_merge)
        self.button_browse_merge_3.setGeometry(QtCore.QRect(550, 60, 75, 23))
        self.button_browse_merge_3.setObjectName("button_browse_merge_3")
        self.button_cancel_merge = QtWidgets.QPushButton(self.tab_merge)
        self.button_cancel_merge.setGeometry(QtCore.QRect(300, 160, 75, 23))
        self.button_cancel_merge.setObjectName("button_cancel_merge")
        self.button_browse_config_merge = QtWidgets.QPushButton(self.tab_merge)
        self.button_browse_config_merge.setGeometry(QtCore.QRect(550, 20, 75, 23))
        self.button_browse_config_merge.setObjectName("button_browse_config_merge")
        self.label_config_file_merge = QtWidgets.QLabel(self.tab_merge)
        self.label_config_file_merge.setGeometry(QtCore.QRect(20, 20, 61, 16))
        self.label_config_file_merge.setObjectName("label_config_file_merge")
        self.line_edit_config = QtWidgets.QLineEdit(self.tab_merge)
        self.line_edit_config.setGeometry(QtCore.QRect(90, 20, 451, 20))
        self.line_edit_config.setObjectName("line_edit_config")
        self.line_edit_folder_merge = QtWidgets.QLineEdit(self.tab_merge)
        self.line_edit_folder_merge.setGeometry(QtCore.QRect(90, 60, 451, 20))
        self.line_edit_folder_merge.setObjectName("line_edit_folder_merge")
        self.line_edit_merge_path_merge = QtWidgets.QLineEdit(self.tab_merge)
        self.line_edit_merge_path_merge.setGeometry(QtCore.QRect(90, 100, 451, 20))
        self.line_edit_merge_path_merge.setObjectName("line_edit_merge_path_merge")
        self.Tab_MAIN.addTab(self.tab_merge, "")
        self.tab_split = QtWidgets.QWidget()
        self.tab_split.setObjectName("tab_split")
        self.button_browse_file_pt_split = QtWidgets.QPushButton(self.tab_split)
        self.button_browse_file_pt_split.setGeometry(QtCore.QRect(550, 40, 75, 23))
        self.button_browse_file_pt_split.setObjectName("button_browse_file_pt_split")
        self.button_split = QtWidgets.QPushButton(self.tab_split)
        self.button_split.setEnabled(False)
        self.button_split.setGeometry(QtCore.QRect(220, 160, 75, 23))
        self.button_split.setObjectName("button_split")
        self.label_file_path_split = QtWidgets.QLabel(self.tab_split)
        self.label_file_path_split.setGeometry(QtCore.QRect(20, 40, 61, 16))
        self.label_file_path_split.setObjectName("label_file_path_split")
        self.button_browse_out_pt_split_2 = QtWidgets.QPushButton(self.tab_split)
        self.button_browse_out_pt_split_2.setGeometry(QtCore.QRect(550, 100, 75, 23))
        self.button_browse_out_pt_split_2.setObjectName("button_browse_out_pt_split_2")
        self.label_out_path_split = QtWidgets.QLabel(self.tab_split)
        self.label_out_path_split.setGeometry(QtCore.QRect(20, 100, 61, 16))
        self.label_out_path_split.setObjectName("label_out_path_split")
        self.button_cancel_split = QtWidgets.QPushButton(self.tab_split)
        self.button_cancel_split.setGeometry(QtCore.QRect(300, 160, 75, 23))
        self.button_cancel_split.setObjectName("button_cancel_split")
        self.line_edit_file_path_split = QtWidgets.QLineEdit(self.tab_split)
        self.line_edit_file_path_split.setGeometry(QtCore.QRect(90, 40, 451, 20))
        self.line_edit_file_path_split.setObjectName("line_edit_file_path_split")
        self.line_edit_out_path_split = QtWidgets.QLineEdit(self.tab_split)
        self.line_edit_out_path_split.setGeometry(QtCore.QRect(90, 100, 451, 20))
        self.line_edit_out_path_split.setObjectName("line_edit_out_path_split")
        self.Tab_MAIN.addTab(self.tab_split, "")
        SplitDownloader.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(SplitDownloader)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 677, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        SplitDownloader.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(SplitDownloader)
        self.statusbar.setObjectName("statusbar")
        SplitDownloader.setStatusBar(self.statusbar)
        self.actionExit = QtWidgets.QAction(SplitDownloader)
        self.actionExit.setObjectName("actionExit")
        self.actiongithub = QtWidgets.QAction(SplitDownloader)
        self.actiongithub.setObjectName("actiongithub")
        self.menuFile.addAction(self.actionExit)
        self.menuAbout.addAction(self.actiongithub)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(SplitDownloader)
        self.Tab_MAIN.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(SplitDownloader)

        #actions
        self.dialogbox = dialog_box()
        self.button_exit.clicked.connect(self.exit_click)
        self.button_url_check.clicked.connect(self.url_check)




    def exit_click(self):
        self.logger.info("Exit pressed..")
        print("exit")
        button_value = self.dialogbox.question("Do you want to exit?")
        if "ok" in button_value.lower():
            self.logger.info("Exit : Ok pressed..")
            sys.exit(1)
        else:
            self.logger.info("Exit : Cancel pressed..")

    def url_check(self):
        url = self.url_line_edit.text()
        self.download_obj = download(self.logger, url)
        if not self.download_obj.internet_check():
            return
        if not self.download_obj.url_check():
            return
        file_size, content_type, accept_ranges = self.download_obj.get_headers()
        print(file_size, content_type, accept_ranges)
        if content_type and "html" in content_type:
            print("The content is not downloadable")
            self.label_file_size_output.setText("--")
            self.label_yes_no.setText("NO")
            self.dialogbox.warning_box(f"The URL: {url} is not downloadable")
            self.logger.warning(f"The URL: {url} is not downloadable")
            return
        if file_size:
            print("File size")
            file_size = int(file_size)
            self.file_size_B = file_size
            print(file_size)
            if file_size/1024/1024/1024 > 1:
                file_size = str(round(file_size/1024/1024/1024, 2)) + " GB"
            elif file_size/1024/1024 > 1:
                file_size = str(round(file_size/1024/1024, 2)) + " MB"
            elif file_size/1024 > 1:
                file_size = str(round(file_size/1024, 2)) + " KB"
            elif file_size:
                file_size = str(file_size) + " B"
            self.label_file_size_output.setText(file_size)
            self.logger.info(f"File size : {file_size}")
        else:
            self.label_file_size_output.setText("--")

        if accept_ranges and "bytes" in accept_ranges:
            print("bytes")
            self.label_yes_no.setText("YES")
            self.lineedit_chunk_size.setEnabled(True)
            self.combo_partselect.setEnabled(True)
            self.button_ok_part_select.setEnabled(True)
            self.lineedit_chunk_size.editingFinished.connect(self.chunk_splitter)
            self.logger.info("The URL is split downloable")
        elif not accept_ranges:
            print("bytes")
            self.label_yes_no.setText("NO")
            self.dialogbox.info_box("The file is not splitable you can download as full")


    def chunk_splitter(self):
        self.lineedit_chunk_size.editingFinished.disconnect()
        chunk_size = int(self.lineedit_chunk_size.text())
        spinbox = dialog_box()
        cnfm_chunk = spinbox.question("Do you want to proceed with the selected chunk size : " + str(chunk_size) + " MB?")
        if "cancel" in cnfm_chunk.lower():
            return
        if chunk_size:
            parts = self.download_obj.split_parts(chunk_size)
            print(chunk_size)
        self.combo_partselect.clear()
        self.combo_partselect.addItems(list(map(str, parts)))
        self.lineedit_chunk_size.editingFinished.connect(self.chunk_splitter)







    def retranslateUi(self, SplitDownloader):
        _translate = QtCore.QCoreApplication.translate
        SplitDownloader.setWindowTitle(_translate("SplitDownloader", "Split Downloader"))
        self.groupbox_status.setTitle(_translate("SplitDownloader", "Status"))
        self.label_download_status.setText(_translate("SplitDownloader", "Status"))
        self.button_exit.setText(_translate("SplitDownloader", "Exit"))
        self.SplitDownloader_header.setText(_translate("SplitDownloader", "SPLIT DOWNLOADER"))
        self.button_browse_download.setText(_translate("SplitDownloader", "Browse"))
        self.label_split_downloadable.setText(_translate("SplitDownloader", "Split Downloadble:"))
        self.label_part_select.setText(_translate("SplitDownloader", "Part Select"))
        self.label_yes_no.setText(_translate("SplitDownloader", "NO"))
        self.button_ok_part_select.setText(_translate("SplitDownloader", "Ok"))
        self.label_file_size_output.setText(_translate("SplitDownloader", "--"))
        self.label_file_size.setText(_translate("SplitDownloader", "File Size :"))
        self.label_url.setText(_translate("SplitDownloader", "URL"))
        self.label_folder_path_download.setText(_translate("SplitDownloader", "Folder Path"))
        self.button_url_check.setText(_translate("SplitDownloader", "Check"))
        self.button_download.setText(_translate("SplitDownloader", "Download"))
        self.label_chunk_size.setText(_translate("SplitDownloader", "Chunk Size :"))
        self.label_MB.setText(_translate("SplitDownloader", "MB"))
        self.button_cancel_download.setText(_translate("SplitDownloader", "Cancel"))
        self.url_line_edit.setPlaceholderText(_translate("SplitDownloader", "Enter the Download URL"))
        self.folder_download_line_edit.setPlaceholderText(_translate("SplitDownloader", "Select the folder path to download"))
        self.Tab_MAIN.setTabText(self.Tab_MAIN.indexOf(self.tab_download), _translate("SplitDownloader", "Download"))
        self.button_merge.setText(_translate("SplitDownloader", "Merge"))
        self.button_browse_merge_path_merge.setText(_translate("SplitDownloader", "Browse"))
        self.label_merge_path_merge.setText(_translate("SplitDownloader", "Merge Path"))
        self.label_folder_path_merge_3.setText(_translate("SplitDownloader", " Folder Path"))
        self.button_browse_merge_3.setText(_translate("SplitDownloader", "Browse"))
        self.button_cancel_merge.setText(_translate("SplitDownloader", "Cancel"))
        self.button_browse_config_merge.setText(_translate("SplitDownloader", "Browse"))
        self.label_config_file_merge.setText(_translate("SplitDownloader", "Config File"))
        self.line_edit_config.setPlaceholderText(_translate("SplitDownloader", "Select the config file created by Downloader/Spltter"))
        self.line_edit_folder_merge.setPlaceholderText(_translate("SplitDownloader", "Select the folder that conatins the split files to merge (starting name should be 1,2,3)"))
        self.line_edit_merge_path_merge.setPlaceholderText(_translate("SplitDownloader", "Select the path to store the merge output"))
        self.Tab_MAIN.setTabText(self.Tab_MAIN.indexOf(self.tab_merge), _translate("SplitDownloader", "Merge"))
        self.button_browse_file_pt_split.setText(_translate("SplitDownloader", "Browse"))
        self.button_split.setText(_translate("SplitDownloader", "Split"))
        self.label_file_path_split.setText(_translate("SplitDownloader", "File Path"))
        self.button_browse_out_pt_split_2.setText(_translate("SplitDownloader", "Browse"))
        self.label_out_path_split.setText(_translate("SplitDownloader", "Out Path"))
        self.button_cancel_split.setText(_translate("SplitDownloader", "Cancel"))
        self.line_edit_file_path_split.setPlaceholderText(_translate("SplitDownloader", "Select the file to split"))
        self.line_edit_out_path_split.setPlaceholderText(_translate("SplitDownloader", "Select the output path to store the split files"))
        self.Tab_MAIN.setTabText(self.Tab_MAIN.indexOf(self.tab_split), _translate("SplitDownloader", "Split"))
        self.menuFile.setTitle(_translate("SplitDownloader", "File"))
        self.menuAbout.setTitle(_translate("SplitDownloader", "About"))
        self.actionExit.setText(_translate("SplitDownloader", "Exit"))
        self.actiongithub.setText(_translate("SplitDownloader", "github"))
import download_rc
